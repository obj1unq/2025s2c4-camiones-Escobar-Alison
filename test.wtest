import camion.*
import cosas.*


describe "Pruebas de carga y descarga del camión" {

	test "Cargar Bumblebee"{
		camion.cargar(bumblebee)

		assert.equals([bumblebee], camion.cosas())
	}
	
	test "Cargar Bumblebee y luego Knight Rider" {
		camion.cargar(bumblebee)
		camion.cargar(knightRider)

		assert.equals([bumblebee, knightRider], camion.cosas())
	}

	test "Descargar Bumblebee deja solo KnightRider" {
		camion.cargar(bumblebee)
		camion.cargar(knightRider)
		camion.descargar(bumblebee)
		assert.equals([knightRider], camion.cosas())
	}		

	test "Cargar a KnightRider y no puede" {
		camion.cargar(knightRider)
		assert.throwsExceptionWithMessage(
   		"Ya está knightRider en el camión", { camion.cargar(knightRider) }
    	)
    }

	test "Descargar a Bumblebee y no puede" {
		assert.throwsExceptionWithMessage(
   		"No está bumblebee en el camión", { camion.descargar(bumblebee) }
    	)
    }
}

describe "Pruebas de todo es par" {
  test "Camión cargado con Bumblebee y Arena a Granel 50kg" {
	camion.cargar(bumblebee)
	arenaAGranel.peso(50)
	camion.cargar(arenaAGranel)

	assert.that(camion.todoPesoEsPar())
  }

  test "Camión cargado con Bumblebee y Arena a Granel 51kg" {
	camion.cargar(bumblebee)
	arenaAGranel.peso(51)
	camion.cargar(arenaAGranel)

	assert.notThat(camion.todoPesoEsPar())
  }

}

describe "Pruebas hay alguno que pesa" {
  method initialize() {
    camion.cargar(bumblebee)
	arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)
  }
  test "Hay alguno que pesa 50kg" {
	assert.that(camion.hayAlgunoQuePesa(50))
  }
  test "Hay alguno que pesa 800kg" {
	assert.that(camion.hayAlgunoQuePesa(800))
  }
  test "Hay alguno que pesa 500kg" {
	assert.notThat(camion.hayAlgunoQuePesa(500))
  }
}

describe "Prueba de paso y exceso de peso" {
  test "Camion con Bumblebee y 300 paquete de ladrillos" {
	camion.cargar(bumblebee)
	paqueteDeLadrillos.cantidad(300)
	camion.cargar(paqueteDeLadrillos)

	assert.equals(2400, camion.pesoTotal())
	assert.notThat(camion.estaExcedidoDePeso())
  }

    test "Camion con Bumblebee y 400 paquete de ladrillos" {
	camion.cargar(bumblebee)
	paqueteDeLadrillos.cantidad(400)
	camion.cargar(paqueteDeLadrillos)

	assert.equals(2600, camion.pesoTotal())
	assert.that(camion.estaExcedidoDePeso())
  }
}

describe "Pruebas de nivel" {
  method initialize() {
	bumblebee.estaTransformadoEnRobot(false)
    camion.cargar(bumblebee)

	bateriaAntiaerea.tieneMisilesCargados(false)
    camion.cargar(bateriaAntiaerea)

	resuidosRadioactivos.peso(200)
	camion.cargar(resuidosRadioactivos)
  }
  test "nivel 0" {
	assert.equals(bateriaAntiaerea, camion.cosaConNivelPeligoso(0))
  }

  test "nivel 15" {
	assert.equals(bumblebee, camion.cosaConNivelPeligoso(15))
  }

  test "nivel 200" {
	assert.equals(resuidosRadioactivos, camion.cosaConNivelPeligoso(200))
  }

  test "nivel 30 y no está" {
	assert.throwsException { camion.cosaConNivelPeligoso(30) }
  }

  test "Bumblebee modo robot y nivel 30" {
	camion.descargar(bumblebee) //se usa si hago porque hago initialize
	bumblebee.estaTransformadoEnRobot(true)
	camion.cargar(bumblebee)

	assert.equals(bumblebee, camion.cosaConNivelPeligoso(30))
  }
}

describe "Pruebas de cosas peligrosas" {
	method initialize(){
		camion.cargar(knightRider)

		bateriaAntiaerea.tieneMisilesCargados(true)
		camion.cargar(bateriaAntiaerea)
	}
	test "Cosas más peligrosas de nivel 15" {
	assert.equals([bateriaAntiaerea], camion.cosasMasPeligrosasQueNivel(15))
	}
	test "Cosas más peligrosas que Bumblebee" {
	assert.equals([bateriaAntiaerea], camion.cosasMasPeligrosasQueNivel(15))
	}
	test "Cosas más peligrosas de nivel 2" {
	assert.equals([knightRider, bateriaAntiaerea], camion.cosasMasPeligrosasQueNivel(2))
	}
	test "Cosas más peligrosas que el paquete de ladrillos" {
	assert.equals([knightRider, bateriaAntiaerea], camion.cosasMasPeligrosasQue(paqueteDeLadrillos))
	}
	test "No hay cosas más peligrosas que 200" {
	assert.equals([], camion.cosasMasPeligrosasQueNivel(200))
	}
	test "No hay cosas más peligrosas que los residuos radiactivos" {
	assert.equals([], camion.cosasMasPeligrosasQue(resuidosRadioactivos))
	}

}

describe "Pruebas de puede circular en ruta" {
  test "Camión tiene a Bumblebee en auto y un paquete de 300 ladrillos" {
	bumblebee.estaTransformadoEnRobot(false)
	camion.cargar(bumblebee)

	paqueteDeLadrillos.cantidad(300)
	camion.cargar(paqueteDeLadrillos)

	assert.that(camion.puedeCircularEnRuta(20))
  }

  test "Camión tiene a Bumblebee en auto y un paquete de 400 ladrillos" {
	bumblebee.estaTransformadoEnRobot(false)
	camion.cargar(bumblebee)

	paqueteDeLadrillos.cantidad(400)
	camion.cargar(paqueteDeLadrillos)

	assert.notThat(camion.puedeCircularEnRuta(20))
  }

  test "Camión tiene a Bumblebee en robot y un paquete de 300 ladrillos" {
	bumblebee.estaTransformadoEnRobot(true)
	camion.cargar(bumblebee)

	paqueteDeLadrillos.cantidad(300)
	camion.cargar(paqueteDeLadrillos)

	assert.notThat(camion.puedeCircularEnRuta(20))
  }

}

describe "Pruebas de más cosas" {
  test "El contenedor portuario vacío pesa 100 y su peligrosidad es 0" {
	assert.equals(100, contenedor.peso())
	assert.equals(0, contenedor.nivelPeligrosidad())
  }
  test "El contenedor portuario tiene a Knight Rider y 50 kg de arena a granel" {
	contenedor.cargar(knightRider)

	arenaAGranel.peso(50)
	contenedor.cargar(arenaAGranel)

	assert.equals(650, contenedor.peso())
	assert.equals(10, contenedor.nivelPeligrosidad())
  }
  test "El embalaje de seguridad envuelve a Knight Rider" {
	embalajeDeSeguridad.cosaEnvuelta(knightRider)
	
	assert.equals(500, embalajeDeSeguridad.peso())
	assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())
  }
  test "El embalaje de seguridad envuelve a Bumblebee en modo auto" {
	bumblebee.estaTransformadoEnRobot(false)
	embalajeDeSeguridad.cosaEnvuelta(bumblebee)
	
	assert.equals(800, embalajeDeSeguridad.peso())
	assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())
  }
}

describe "Pruebas cuando hay algo que pesa entre dos valores"{
	method initialize(){
		camion.cargar(bumblebee)
		paqueteDeLadrillos.cantidad(300)
		camion.cargar(paqueteDeLadrillos)
	}
	test "Tiene algo que pesa entre 5 y 700"{
		assert.that(camion.contengoAlgunaCosaQuePesaEntre_Y_(5, 700))
	}
	test "Tiene algo que pesa entre 5 y 1000"{
		assert.that(camion.contengoAlgunaCosaQuePesaEntre_Y_(5, 1000))
	}
	test "Tiene algo que pesa entre 900 y 1000"{
		assert.notThat(camion.contengoAlgunaCosaQuePesaEntre_Y_(900, 1000))
	}
}

describe "Pruebas de cosa más pesada" {
  test "Camión cargado con Bumblebee y un paquete de 300 ladrillos" {
	camion.cargar(bumblebee)
	paqueteDeLadrillos.cantidad(300)
	camion.cargar(paqueteDeLadrillos)

	assert.equals(bumblebee, camion.cosaMasPesada())
  }
  test "Camión  vacío, no se puede" {
	assert.throwsException {camion.cosaMasPesada()}
  }
}

describe "Prueba de pesos" {
  test "Camión cargado con Bumblebee y un paquete de 300 ladrillos" {
	camion.cargar(bumblebee)

	paqueteDeLadrillos.cantidad(300)
	camion.cargar(paqueteDeLadrillos)

	assert.equals([800, 600], camion.pesos())
  }
}

describe "Pruebas de total bultos" {
  test "caso 1" {
    contenedor.cargar(knightRider)
    contenedor.cargar(bumblebee)
    camion.cargar(contenedor)

    embalajeDeSeguridad.cosaEnvuelta(resuidosRadioactivos)
    
	camion.cargar(embalajeDeSeguridad)

    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)

    paqueteDeLadrillos.cantidad(50)
    camion.cargar(paqueteDeLadrillos)

    bateriaAntiaerea.tieneMisilesCargados(false)
    camion.cargar(bateriaAntiaerea)

    assert.equals(9, camion.totalBultos())
  }

  test "Caso 2" {
    paqueteDeLadrillos.cantidad(150)
    camion.cargar(paqueteDeLadrillos)

    bateriaAntiaerea.tieneMisilesCargados(true)
    camion.cargar(bateriaAntiaerea)

    camion.cargar(contenedor) //ya está vacío

    assert.equals(5, camion.totalBultos())
  }
  test "Total de bultos es 4" {
	paqueteDeLadrillos.cantidad(350)
    camion.cargar(paqueteDeLadrillos)

    arenaAGranel.peso(100)
    camion.cargar(arenaAGranel)

    assert.equals(4, camion.totalBultos())
  }
}


describe "Pruebas de accidentes" {
	test "Caso 1"{
	contenedor.cargar(knightRider)

    bumblebee.estaTransformadoEnRobot(false)
    contenedor.cargar(bumblebee)
    
	camion.cargar(contenedor)

    resuidosRadioactivos.peso(15)
    embalajeDeSeguridad.cosaEnvuelta(resuidosRadioactivos)
    camion.cargar(embalajeDeSeguridad)

    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)

    paqueteDeLadrillos.cantidad(100)
    camion.cargar(paqueteDeLadrillos)

    bateriaAntiaerea.tieneMisilesCargados(true)
    camion.cargar(bateriaAntiaerea)

    camion.accidente()

    assert.that(bumblebee.estaTransformadoEnRobot())
    assert.equals(30, resuidosRadioactivos.peso())
    assert.equals(70, arenaAGranel.peso())
    assert.equals(88, paqueteDeLadrillos.cantidad())
    assert.notThat(bateriaAntiaerea.tieneMisilesCargados())
	}
  test "Caso 2" {
    bumblebee.estaTransformadoEnRobot(true)
    camion.cargar(bumblebee)

    resuidosRadioactivos.peso(30)
    camion.cargar(resuidosRadioactivos)

    paqueteDeLadrillos.cantidad(10)
    camion.cargar(paqueteDeLadrillos)

    bateriaAntiaerea.tieneMisilesCargados(false)
    camion.cargar(bateriaAntiaerea)

    camion.accidente()

    assert.notThat(bumblebee.estaTransformadoEnRobot())
    assert.equals(45, resuidosRadioactivos.peso())
    assert.equals(0, paqueteDeLadrillos.cantidad())
    assert.notThat(bateriaAntiaerea.tieneMisilesCargados())
  }
}

describe "Pruebas de transporte" {
  method initialize(){
    almacen.cargar(knightRider)
    almacen.cargar(resuidosRadioactivos)

    bumblebee.estaTransformadoEnRobot(false)
    camion.cargar(bumblebee)

    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)
  }
  test "Transporte por ruta 9 exitoso" {
    camion.transportar(almacen, ruta9)

    assert.equals([], camion.cosas())

    assert.equals(
      [knightRider, resuidosRadioactivos, bumblebee, arenaAGranel],
      almacen.stock()
    )
  }
  
  test "Ruta 9 fallido por peligrosidad" {
	bumblebee.estaTransformadoEnRobot(true)

	assert.throwsExceptionWithMessage(
		"No se puede ir, el camino no es el adecuado para circular"
		, {camion.transportar(almacen, ruta9)}
	)

	assert.equals([knightRider, resuidosRadioactivos], almacen.stock())
	assert.equals([bumblebee, arenaAGranel], camion.cosas())
  }
  test "Ruta 9 fallido por exceso de peso"{
	arenaAGranel.peso(2000)

	assert.throwsExceptionWithMessage(
		"No se puede ir, el camino no es el adecuado para circular"
		, {camion.transportar(almacen, ruta9)}
	)

	assert.equals([knightRider, resuidosRadioactivos], almacen.stock())
	assert.equals([bumblebee, arenaAGranel], camion.cosas())
  }
}


